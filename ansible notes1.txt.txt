31st March:

exception handling or error handling:

ignore_errors: yes       >> by default if any task failed , ansible wont proceed with the next task, 
                            but by using this we can ignore tasks failures and proceed furthur.

---
- hosts: all
  tasks:
  - name: checking file path
    command: ls -l /tmp/file2
    ignore_errors: yes
  - name: install httpd
    yum: name=httpd state=installed


block and rescue:   >> by default if any task failed , ansible wont proceed with the next task, 
                            but by using this we can run rescued tasks and fix the issue thn go with next task
                          

54.147.61.107
  - name: install httpd
    yum: name=httpd state=installed

3.when:  by default ansible run all tasks in all machines,
       but by using when module , based on some condition we can run our tasks

---
- hosts: all
  tasks:
  - name:
    block:
    - name: checking file path
      command: ls -l /tmp/file2
    rescue:
    - name: create file
      file: name=/tmp/file2 state=touch
  - name: install httpd
    yum: name=httpd state=installed
    when: ansible_os_family == "RedHat"

4)handler
---
- hosts: dev
  tasks:
  - name: install httpd
    yum: name=httpd state=installed
  - name: copy config
    copy: src=httpd.conf dest=/etc/httpd/conf
    notify: restart the service
  - name: start the service
    service: name=httpd state=started



  handlers:
  - name: restart the service
    service: name=httpd state=restarted




3 configuration copy task - successful then restart service
4
5

5) forcefully i would like to fail one of the task? failed_when
a) checking available ram 
command: free -m > memory


- name: Making sure the Physical Memory more than 2gb
    shell: "cat /proc/meminfo|grep -i memtotal|awk '{print $2/1024/1024}'"
    register: memory
    failed_when: "memory.stdout|float < 2"




6) forcefully i would like to success my tasks?  chaned_when

in this case actually my command will start the application if it is not running state and if it is already running state, ansible wont do anything 
but in both the cases ansible is returning changed=true only and this behaviour can we be changed by using changed_when, So if already running keyword is not there then only ansible 

will return chnaged=true status.

    shell: "httpd -k start"
    changed_when: "'already running' not in starthttpdout.stdout"




###########################
register module: by using this we store any command outputs.

    - name: checking file path
      command: ls -l /tmp/file2
      register: filepath
    - debug:
       var: filepath.stdout_lines



4-april
1) how to add ansible master as agent 
2) how to ignore warning messages in ansible playbook



item variable: to repeat the particular tasks


  - name: install packages
    yum: name={{ item }} state=absent
    with_items:
     - httpd
     - git
     - docker
     - java

add master into inventory file

1. create ansible user in master and and in all the agents also?
2. provide sudo access for ansible user in all including master?
3. Generate RSA keys for ansible user only in master?  /home/ansible/.ssh/             id_rsa    id_rsa.pub
4. Copy the ansible user public key from master to all angents ansible user folder authorized keys?  /home/ansible/.ssh/authorized_keys 
5. Change the ownership of /etc/ansible folder to ansible user in master


---
- hosts: all
  tasks:
  - name: create users
    user: name=ansible
  - name: provide sudo acces
    
  - name: generate rsa keys in master for ansible (only master)
    
- name: copy the public key from master to agents
- name: change the ownership of /etc/ansible forlder recursively to ansible. (master)


ssh-keygen
/root/.ssh/    id_rsa   id_rsa.pub  

/home/ansible/.ssh   id_rsa   id_rsa.pub  


 /home/ansible/.ssh/authorized_keys 
     
in slave machines   /root/.ssh/authorized_keys 






Precedence order
Ansible defines the precedence order as follows:

1.Extra vars (from command-line) always win.
2.Task vars (only for the specific task).
3.Block vars (only for the tasks within the block).
4.Role and include vars.
5.Vars created with set_fact.
6.Vars created with the register task directive.
7.Play vars_files.
8.Play vars_prompt.
9.Play vars.
10.Host facts.
11.Playbook host_vars.
12.Playbook group_vars.
13.Inventory host_vars.
14.Inventory group_vars.
15.Inventory vars.
16.Role defaults.


roles/web

---
- hosts: sai
  tasks:
  - name: install git
    yum: name=git state=installed
  - name: create user
    user: name=amar state=present
  roles:
   - web

---
- hosts: srikanth
  tasks: create file
  file: name=/tmp/file1 state=touch
  roles:
   - web

















